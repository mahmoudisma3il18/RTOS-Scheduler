
MyRTOS.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000000cc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080001fc  08000204  00010204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080001fc  080001fc  00010204  2**0
                  CONTENTS
  4 .ARM          00000000  080001fc  080001fc  00010204  2**0
                  CONTENTS
  5 .preinit_array 00000000  080001fc  08000204  00010204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080001fc  080001fc  000101fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000200  08000200  00010200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000204  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000204  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001022d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000001e0  00000000  00000000  00010270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000f5  00000000  00000000  00010450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00010548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002c  00000000  00000000  00010590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000327b  00000000  00000000  000105bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000989  00000000  00000000  00013837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000f4a8  00000000  00000000  000141c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000028  00000000  00000000  00023668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00023690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080001e4 	.word	0x080001e4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080001e4 	.word	0x080001e4

08000170 <main>:

int x;


int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_GPIOB_CLK_EN();
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <main+0x20>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a05      	ldr	r2, [pc, #20]	; (8000190 <main+0x20>)
 800017a:	f043 0308 	orr.w	r3, r3, #8
 800017e:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <main+0x20>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a02      	ldr	r2, [pc, #8]	; (8000190 <main+0x20>)
 8000186:	f043 0301 	orr.w	r3, r3, #1
 800018a:	6193      	str	r3, [r2, #24]





	while (1)
 800018c:	e7fe      	b.n	800018c <main+0x1c>
 800018e:	bf00      	nop
 8000190:	40021000 	.word	0x40021000

08000194 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000194:	480c      	ldr	r0, [pc, #48]	; (80001c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000196:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000198:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800019c:	480b      	ldr	r0, [pc, #44]	; (80001cc <LoopForever+0x6>)
  ldr r1, =_edata
 800019e:	490c      	ldr	r1, [pc, #48]	; (80001d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001a0:	4a0c      	ldr	r2, [pc, #48]	; (80001d4 <LoopForever+0xe>)
  movs r3, #0
 80001a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001a4:	e002      	b.n	80001ac <LoopCopyDataInit>

080001a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001aa:	3304      	adds	r3, #4

080001ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001b0:	d3f9      	bcc.n	80001a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001b2:	4a09      	ldr	r2, [pc, #36]	; (80001d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001b4:	4c09      	ldr	r4, [pc, #36]	; (80001dc <LoopForever+0x16>)
  movs r3, #0
 80001b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001b8:	e001      	b.n	80001be <LoopFillZerobss>

080001ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001bc:	3204      	adds	r2, #4

080001be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001c0:	d3fb      	bcc.n	80001ba <FillZerobss>

/* Call static constructors */
/*  bl __libc_init_array */
/* Call the application's entry point.*/
  bl main
 80001c2:	f7ff ffd5 	bl	8000170 <main>

080001c6 <LoopForever>:

LoopForever:
  b LoopForever
 80001c6:	e7fe      	b.n	80001c6 <LoopForever>
  ldr   r0, =_estack
 80001c8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80001cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001d4:	08000204 	.word	0x08000204
  ldr r2, =_sbss
 80001d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001dc:	2000001c 	.word	0x2000001c

080001e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001e0:	e7fe      	b.n	80001e0 <ADC1_2_IRQHandler>
	...

080001e4 <_init>:
 80001e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001e6:	bf00      	nop
 80001e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80001ea:	bc08      	pop	{r3}
 80001ec:	469e      	mov	lr, r3
 80001ee:	4770      	bx	lr

080001f0 <_fini>:
 80001f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001f2:	bf00      	nop
 80001f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80001f6:	bc08      	pop	{r3}
 80001f8:	469e      	mov	lr, r3
 80001fa:	4770      	bx	lr
